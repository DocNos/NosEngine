{"message":"attribute should be applied to a struct, enum, or union","code":{"code":"E0517","explanation":"A `#[repr(..)]` attribute was placed on an unsupported item.\n\nExamples of erroneous code:\n\n```compile_fail,E0517\n#[repr(C)]\ntype Foo = u8;\n\n#[repr(packed)]\nenum Foo {Bar, Baz}\n\n#[repr(u8)]\nstruct Foo {bar: bool, baz: bool}\n\n#[repr(C)]\nimpl Foo {\n    // ...\n}\n```\n\n* The `#[repr(C)]` attribute can only be placed on structs and enums.\n* The `#[repr(packed)]` and `#[repr(simd)]` attributes only work on structs.\n* The `#[repr(u8)]`, `#[repr(i16)]`, etc attributes only work on enums.\n\nThese attributes do not work on typedefs, since typedefs are just aliases.\n\nRepresentations like `#[repr(u8)]`, `#[repr(i64)]` are for selecting the\ndiscriminant size for enums with no data fields on any of the variants, e.g.\n`enum Color {Red, Blue, Green}`, effectively setting the size of the enum to\nthe size of the provided type. Such an enum can be cast to a value of the same\ntype as well. In short, `#[repr(u8)]` makes the enum behave like an integer\nwith a constrained set of allowed values.\n\nOnly field-less enums can be cast to numerical primitives, so this attribute\nwill not apply to structs.\n\n`#[repr(packed)]` reduces padding to make the struct size smaller. The\nrepresentation of enums isn't strictly defined in Rust, and this attribute\nwon't work on enums.\n\n`#[repr(simd)]` will give a struct consisting of a homogeneous series of machine\ntypes (i.e., `u8`, `i32`, etc) a representation that permits vectorization via\nSIMD. This doesn't make much sense for enums since they don't consist of a\nsingle list of data.\n"},"level":"error","spans":[{"file_name":"/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/ffi/abi.rs","byte_start":1065,"byte_end":1448,"line_start":45,"line_end":50,"column_start":12,"column_end":55,"is_primary":false,"text":[{"text":"#[repr(C)] pub type wl_dispatcher_func_t = extern fn(*const c_void, ","highlight_start":12,"highlight_end":69},{"text":"                                                     *mut c_void,","highlight_start":1,"highlight_end":66},{"text":"                                                     uint32_t,","highlight_start":1,"highlight_end":63},{"text":"                                                     *const wl_message,","highlight_start":1,"highlight_end":72},{"text":"                                                     *mut wl_argument","highlight_start":1,"highlight_end":70},{"text":"                                                    );","highlight_start":1,"highlight_end":55}],"label":"not a struct, enum, or union","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/ffi/abi.rs","byte_start":1061,"byte_end":1062,"line_start":45,"line_end":45,"column_start":8,"column_end":9,"is_primary":true,"text":[{"text":"#[repr(C)] pub type wl_dispatcher_func_t = extern fn(*const c_void, ","highlight_start":8,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0517]\u001b[0m\u001b[0m\u001b[1m: attribute should be applied to a struct, enum, or union\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/ffi/abi.rs:45:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m#[repr(C)] pub type wl_dispatcher_func_t = extern fn(*const c_void, \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m___-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                                     *mut c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                                     uint32_t,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                                     *const wl_message,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                                     *mut wl_argument\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                                    );\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot a struct, enum, or union\u001b[0m\n\n"}
{"message":"attribute should be applied to a struct, enum, or union","code":{"code":"E0517","explanation":"A `#[repr(..)]` attribute was placed on an unsupported item.\n\nExamples of erroneous code:\n\n```compile_fail,E0517\n#[repr(C)]\ntype Foo = u8;\n\n#[repr(packed)]\nenum Foo {Bar, Baz}\n\n#[repr(u8)]\nstruct Foo {bar: bool, baz: bool}\n\n#[repr(C)]\nimpl Foo {\n    // ...\n}\n```\n\n* The `#[repr(C)]` attribute can only be placed on structs and enums.\n* The `#[repr(packed)]` and `#[repr(simd)]` attributes only work on structs.\n* The `#[repr(u8)]`, `#[repr(i16)]`, etc attributes only work on enums.\n\nThese attributes do not work on typedefs, since typedefs are just aliases.\n\nRepresentations like `#[repr(u8)]`, `#[repr(i64)]` are for selecting the\ndiscriminant size for enums with no data fields on any of the variants, e.g.\n`enum Color {Red, Blue, Green}`, effectively setting the size of the enum to\nthe size of the provided type. Such an enum can be cast to a value of the same\ntype as well. In short, `#[repr(u8)]` makes the enum behave like an integer\nwith a constrained set of allowed values.\n\nOnly field-less enums can be cast to numerical primitives, so this attribute\nwill not apply to structs.\n\n`#[repr(packed)]` reduces padding to make the struct size smaller. The\nrepresentation of enums isn't strictly defined in Rust, and this attribute\nwon't work on enums.\n\n`#[repr(simd)]` will give a struct consisting of a homogeneous series of machine\ntypes (i.e., `u8`, `i32`, etc) a representation that permits vectorization via\nSIMD. This doesn't make much sense for enums since they don't consist of a\nsingle list of data.\n"},"level":"error","spans":[{"file_name":"/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/ffi/abi.rs","byte_start":1460,"byte_end":1518,"line_start":51,"line_end":51,"column_start":12,"column_end":70,"is_primary":false,"text":[{"text":"#[repr(C)] pub type wl_log_func_t = extern fn(_: *const c_char, ...);","highlight_start":12,"highlight_end":70}],"label":"not a struct, enum, or union","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/ffi/abi.rs","byte_start":1456,"byte_end":1457,"line_start":51,"line_end":51,"column_start":8,"column_end":9,"is_primary":true,"text":[{"text":"#[repr(C)] pub type wl_log_func_t = extern fn(_: *const c_char, ...);","highlight_start":8,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0517]\u001b[0m\u001b[0m\u001b[1m: attribute should be applied to a struct, enum, or union\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/ffi/abi.rs:51:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[repr(C)] pub type wl_log_func_t = extern fn(_: *const c_char, ...);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot a struct, enum, or union\u001b[0m\n\n"}
{"message":"attribute should be applied to a struct, enum, or union","code":{"code":"E0517","explanation":"A `#[repr(..)]` attribute was placed on an unsupported item.\n\nExamples of erroneous code:\n\n```compile_fail,E0517\n#[repr(C)]\ntype Foo = u8;\n\n#[repr(packed)]\nenum Foo {Bar, Baz}\n\n#[repr(u8)]\nstruct Foo {bar: bool, baz: bool}\n\n#[repr(C)]\nimpl Foo {\n    // ...\n}\n```\n\n* The `#[repr(C)]` attribute can only be placed on structs and enums.\n* The `#[repr(packed)]` and `#[repr(simd)]` attributes only work on structs.\n* The `#[repr(u8)]`, `#[repr(i16)]`, etc attributes only work on enums.\n\nThese attributes do not work on typedefs, since typedefs are just aliases.\n\nRepresentations like `#[repr(u8)]`, `#[repr(i64)]` are for selecting the\ndiscriminant size for enums with no data fields on any of the variants, e.g.\n`enum Color {Red, Blue, Green}`, effectively setting the size of the enum to\nthe size of the provided type. Such an enum can be cast to a value of the same\ntype as well. In short, `#[repr(u8)]` makes the enum behave like an integer\nwith a constrained set of allowed values.\n\nOnly field-less enums can be cast to numerical primitives, so this attribute\nwill not apply to structs.\n\n`#[repr(packed)]` reduces padding to make the struct size smaller. The\nrepresentation of enums isn't strictly defined in Rust, and this attribute\nwon't work on enums.\n\n`#[repr(simd)]` will give a struct consisting of a homogeneous series of machine\ntypes (i.e., `u8`, `i32`, etc) a representation that permits vectorization via\nSIMD. This doesn't make much sense for enums since they don't consist of a\nsingle list of data.\n"},"level":"error","spans":[{"file_name":"/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/ffi/abi.rs","byte_start":1531,"byte_end":1561,"line_start":53,"line_end":53,"column_start":12,"column_end":42,"is_primary":false,"text":[{"text":"#[repr(C)] pub type wl_fixed_t = int32_t;","highlight_start":12,"highlight_end":42}],"label":"not a struct, enum, or union","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/ffi/abi.rs","byte_start":1527,"byte_end":1528,"line_start":53,"line_end":53,"column_start":8,"column_end":9,"is_primary":true,"text":[{"text":"#[repr(C)] pub type wl_fixed_t = int32_t;","highlight_start":8,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0517]\u001b[0m\u001b[0m\u001b[1m: attribute should be applied to a struct, enum, or union\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/ffi/abi.rs:53:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[repr(C)] pub type wl_fixed_t = int32_t;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot a struct, enum, or union\u001b[0m\n\n"}
{"message":"the size for values of type `Self` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/core/mod.rs","byte_start":1733,"byte_end":1745,"line_start":57,"line_end":57,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"    fn from(other: T) -> Option<Self>;","highlight_start":26,"highlight_end":38}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by a bound in `Option`","code":null,"level":"note","spans":[{"file_name":"/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/option.rs","byte_start":19401,"byte_end":19402,"line_start":515,"line_end":515,"column_start":17,"column_end":18,"is_primary":true,"text":[],"label":"required by this bound in `Option`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider further restricting `Self`","code":null,"level":"help","spans":[{"file_name":"/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/core/mod.rs","byte_start":1745,"byte_end":1745,"line_start":57,"line_end":57,"column_start":38,"column_end":38,"is_primary":true,"text":[{"text":"    fn from(other: T) -> Option<Self>;","highlight_start":38,"highlight_end":38}],"label":null,"suggested_replacement":" where Self: Sized","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `Self` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nos/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.1.8/src/core/mod.rs:57:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn from(other: T) -> Option<Self>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Option`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting `Self`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn from(other: T) -> Option<Self>\u001b[0m\u001b[0m\u001b[38;5;10m where Self: Sized\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0517.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0517.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
